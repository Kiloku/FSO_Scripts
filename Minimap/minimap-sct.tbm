#Conditional Hooks
$Application: FS2_Open

$On Game Init: [	
	--[[
		Developed by Kiloku
		https://github.com/Kiloku 
		https://www.hard-light.net/forums/index.php?action=profile;u=9051 
	]]--
	
	MiniMap = {}

	--[[ TODO:
		- Add true z-sorting
		- Rectangles: Add off-sets
	]]--

	mn.LuaSEXPs["minimap-add-object"].Action = function (ship, scale, shape, colorR, colorG, colorB, width, length, outline)
		local colorObj = nil
		
		if scale == 0 then
			scale = 1
		end
		
		if colorR ~= nil and colorG ~= nil and colorB ~= nil then
			colorObj = {Red = colorR, Green = colorG, Blue = colorB, Alpha = 255}
		end
		MiniMap:MonitorObject(ship, scale, shape, colorObj, width, length, false, outline)
	end

	mn.LuaSEXPs["minimap-add-object-low"].Action = function (ship, scale, shape, colorR, colorG, colorB, width, length, outline)
		local colorObj = nil
		
		if scale == 0 then
			scale = 1
		end
		
		if colorR ~= nil and colorG ~= nil and colorB ~= nil then
			colorObj = {Red = colorR, Green = colorG, Blue = colorB, Alpha = 255}
		end
		MiniMap:MonitorObject(ship, scale, shape, colorObj, width, length, true, outline)
	end

	mn.LuaSEXPs["minimap-add-class"].Action = function (shipClass, scale, shape, colorR, colorG, colorB, width, length, outline)
		local colorObj = nil
		
		if scale == 0 then
			scale = 1
		end
		
		if colorR ~= nil and colorG ~= nil and colorB ~= nil then
			colorObj = {Red = colorR, Green = colorG, Blue = colorB, Alpha = 255}
		end
		MiniMap:MonitorShipsOfClass(shipClass, scale, shape, colorObj, width, length, false, outline)
	end

	mn.LuaSEXPs["minimap-add-class-low"].Action = function (shipClass, scale, shape, colorR, colorG, colorB, width, length, outline)
		local colorObj = nil
		
		if scale == 0 then
			scale = 1
		end
		
		if colorR ~= nil and colorG ~= nil and colorB ~= nil then
			colorObj = {Red = colorR, Green = colorG, Blue = colorB, Alpha = 255}
		end

		MiniMap:MonitorShipsOfClass(shipClass, scale, shape, colorObj, width, length, true, outline)
	end

	mn.LuaSEXPs["minimap-set-center"].Action = function (X,Z)
		MiniMap.Center = ba.createVector(X,0,Z)
	end

	mn.LuaSEXPs["minimap-set-area-size"].Action = function (Size)
		MiniMap.MonitoringBounds = {w = Size, l = Size}
	end

	mn.LuaSEXPs["minimap-set-follow-player"].Action = function (Follow)
		MiniMap.FollowPlayer = Follow
	end

	mn.LuaSEXPs["minimap-auto-add-fighters"].Action = function (AutoAdd)
		MiniMap.AutoAddFighters = AutoAdd
	end

	mn.LuaSEXPs["minimap-set-default-shape"].Action = function (Shape)
		MiniMap.DefaultShape = Shape
	end

	mn.LuaSEXPs["minimap-set-default-color"].Action = function (ColorSetting)
		MiniMap.DefaultColor = ColorSetting
	end

	mn.LuaSEXPs["minimap-set-custom-color"].Action = function(r,g,b,a)
		a = a or 255
		MiniMap.CustomColor = {Red = r, Green = g, Blue = b, Alpha = a}
	end


	mn.LuaSEXPs["minimap-set-screen-dimensions"].Action = function(x, y, w, h)
		MiniMap.ScreenRect = {x = x, y = y, w = w, h = h}
		MiniMap.ConvertedScreenPos = MiniMap:ConvertScreenPosition(x,y)
	end
	
	mn.LuaSEXPs["minimap-set-bg-color"].Action = function(r,g,b,a)
		a = a or 255
		MiniMap.BGColor = {Red = r, Green = g, Blue = b, Alpha = a}
	end

	mn.LuaSEXPs["minimap-hide"].Action = function ()
		MiniMap.Active = false
	end

	mn.LuaSEXPs["minimap-show"].Action = function ()
		MiniMap.Active = true
	end

	function MiniMap:Init()
		self.ScreenRect = {x = 50, y = 50, w = 150, h = 150}
		self.ConvertedScreenPos = self:ConvertScreenPosition(MiniMap.ScreenRect.x, MiniMap.ScreenRect.y)
		self.Shapes = {Arrow = 1, Circle = 2, Rectangle = 3}
		self.ColorSettings = {Custom = 1, Team = 2}
		self.LowPriorityEntities = {}
		self.MonitoredEntities = {}
		self.FighterList = {}
		self.MapTexture = gr.createTexture(self.ScreenRect.w, self.ScreenRect.h)
		self.Active = true

		--Settings (You may want to change those in FRED)
		self.FollowPlayer = true
		self.DefaultShape = self.Shapes.Circle
		self.DefaultColor = self.ColorSettings.Team
		self.CustomColor = {Red = 255, Green = 255, Blue = 255, Alpha = 255}
		self.AutoAddFighters = true
		self.Center = ba.createVector(0,0,0)
		self.MonitoringBounds = {w = 2000, l = 2000}

		self.BGColor = {Red = 16, Green = 16, Blue = 127, Alpha = 127}


		self.DebugMode = false
		self:MonitorObject(hv.Player, 1, self.Shapes.Arrow, {Red = 255, Green = 255, Blue = 255, Alpha = 255})

	end

	function MiniMap:CheckMonitoredObjects()
		for k, obj in ipairs(MiniMap.MonitoredEntities) do
			if not obj.Entity:isValid() or obj.Entity:isDying() or obj.Entity:isDepartingDockbay() or obj.Entity:isDepartingWarp() then
				table.remove(MiniMap.MonitoredEntities, k)
			end
		end
	end

	function MiniMap:DrawClipped()
		gr.setClip(MiniMap.ConvertedScreenPos.x, MiniMap.ConvertedScreenPos.y, MiniMap.ScreenRect.w, MiniMap.ScreenRect.h)
		MiniMap:Draw(0, 0)
		gr.resetClip()
	end

	function MiniMap:Draw(OriginX, OriginY)
		gr.setColor(MiniMap.BGColor.Red, MiniMap.BGColor.Green, MiniMap.BGColor.Blue ,MiniMap.BGColor.Alpha)
		if MiniMap.FollowPlayer and hv.Player:isValid() then
			MiniMap.Center = hv.Player.Position
		end
		gr.setLineWidth(2)

		gr.drawRectangle(OriginX, OriginY, OriginX + MiniMap.ScreenRect.w, OriginY + MiniMap.ScreenRect.h, true) --drawRectangle(number X1, number Y1, number X2, number Y2, [boolean Filled = true])
		
		self:DrawEntities(self.LowPriorityEntities, OriginX, OriginY)

		self:DrawEntities(self.MonitoredEntities, OriginX, OriginY)

		if MiniMap.DebugMode then
			gr.drawString("MonitoredEntities: " .. #MiniMap.MonitoredEntities, MiniMap.ConvertedScreenPos.x + MiniMap.ScreenRect.w + 10, MiniMap.ConvertedScreenPos.y + MiniMap.ScreenRect.h + 10)

			-- if playerMapCoords then gr.drawString(playerMapCoords.x) end
		end
	end

	function MiniMap:DrawEntities(Entities, OriginX, OriginY)
		for k, obj in ipairs(Entities) do
			local objCoord = self:GetMapCoords(obj.Entity)
			if objCoord then
				gr.setColor(obj.Color.Red, obj.Color.Green, obj.Color.Blue, obj.Color.Alpha)
				if obj.Shape == self.Shapes.Arrow then
					self:DrawArrow((OriginX + objCoord.x), (OriginY + objCoord.y), obj.Entity.Orientation, obj.Scale)
				elseif obj.Shape == self.Shapes.Rectangle then
					self:DrawRectangle(obj, OriginX, OriginY)
				elseif obj.Shape == self.Shapes.Circle then
					gr.drawCircle(2 * obj.Scale, (OriginX + objCoord.x), (OriginY + objCoord.y))
					if (obj.Outline) then
						local tempR, tempG, tempB, tempA = gr.getColor()
						gr.setColor(0, 0, 0, 255)
						gr.setLineWidth(1.2)
						gr.drawCircle(2 * obj.Scale, (OriginX + objCoord.x), (OriginY + objCoord.y), false)
						gr.setColor(tempR, tempG, tempB, tempA)
					end
				else
					-- invalid shape
				end
			end
		end
	end

	function MiniMap:ConvertScreenPosition(x, y)
		resultX = x 
		resultY = y
		if x < 0 then
			resultX = gr.getScreenWidth() + x
		end
		if y < 0 then
			resultY = gr.getScreenHeight() + y
		end
		return {x = resultX, y = resultY}
	end

	-- Given a game object, this function returns the 2D coordinates for that object in the MiniMap space.
	function MiniMap:GetMapCoords(objToCheck, padding, debugMode)
		padding = padding or 500
		if objToCheck == nil then return false end

		if objToCheck.Position == nil then return false end
		
		if debugMode then
			gr.drawString("Object is Valid", MiniMap.ScreenRect.x + MiniMap.ScreenRect.w + 10, MiniMap.ScreenRect.y + MiniMap.ScreenRect.h + 80)
				local posX = string.format("%.2f", objToCheck.Position.x)
				local posZ = string.format("%.2f", objToCheck.Position.z)
			gr.drawString("Position: " .. posX .. ", " .. posZ) 
		end

		local paddedBoundsW = MiniMap.MonitoringBounds.w + padding
		local paddedBoundsL = MiniMap.MonitoringBounds.l + padding

		if 		objToCheck.Position.x > MiniMap.Center.x - paddedBoundsW/2 
			and objToCheck.Position.x < MiniMap.Center.x + paddedBoundsW/2 
			and objToCheck.Position.z > MiniMap.Center.z - paddedBoundsL/2 
			and objToCheck.Position.z < MiniMap.Center.z + paddedBoundsL/2 then
		 		gr.setColor(255, 255, 255, 255)

				if debugMode then
				local formattedX = string.format("%.2f", MiniMap.Center.x)
				local formattedZ = string.format("%.2f", MiniMap.Center.z)
					gr.drawString("CenterX:  " .. string.format("%.2f",formattedX) .. ", CenterZ: " .. string.format("%.2f",formattedZ), MiniMap.ScreenRect.x + MiniMap.ScreenRect.w + 10, MiniMap.ScreenRect.y + MiniMap.ScreenRect.h + 80)
				end
				local relativePosX = (MiniMap.Center.x + MiniMap.MonitoringBounds.w/2) - objToCheck.Position.x --maybe invert those?
				local relativePosZ = (MiniMap.Center.z + MiniMap.MonitoringBounds.l/2) - objToCheck.Position.z 
				if debugMode then
					gr.drawString("  relPos:  " .. string.format("%.2f",relativePosX) .. ", " .. string.format("%.2f",relativePosZ), MiniMap.ScreenRect.x + MiniMap.ScreenRect.w + 10, MiniMap.ScreenRect.y + MiniMap.ScreenRect.h + 40)
				end
				local mapCoordsX, mapCoordsY = (-1 * relativePosX/(MiniMap.MonitoringBounds.w / MiniMap.ScreenRect.w)) + MiniMap.ScreenRect.w, relativePosZ/(MiniMap.MonitoringBounds.l / MiniMap.ScreenRect.h)
				if debugMode then
					gr.drawString("mapCoords: " .. string.format("%.2f",mapCoordsX) .. ", " .. string.format("%.2f",mapCoordsY))
				end
				return {x = mapCoordsX, y = mapCoordsY}
		end

		return false

	end


	-- Draws an arrow (technically a chevron) on the screen. Position is in screen space.
	-- Orientation is an FSO Orientation Matrix (which any game object has as object.Orientation). Scale defaults to 1. 
	function MiniMap:DrawArrow(positionX, positionY, orientation, scale)
		scale = scale or 1


		local dirVector = orientation:getFvec():projectOntoPlane(ba.createVector(0,1,0)):getNormalized()

		--gr.drawString("dirVector: " .. string.format("%.2f",dirVector.x) .. ", " .. string.format("%.2f",dirVector.y) .. ", " .. string.format("%.2f",dirVector.z))


		-- Multiplying the vertexes by the elements of the direction vector to rotate them. 
		-- I was never good with trigonometry, so I apologize to whoever decides to play with this script.
        local bLeft = {x = (-4 * dirVector.z) + ( 10 * -dirVector.x), 
                       y = (-4 * -dirVector.x) - ( 10 * dirVector.z)}

        local bRight = {x = (4 * dirVector.z) + (10 * -dirVector.x), 
                        y = (4 * -dirVector.x) - (10 * dirVector.z)}


		-- (-4x+10y,-4x-10y) (4x+10y,4x-10y) (5y,-5y) (0,0)
		-- bottom left, bottom right, centre bottom, top respectively

 
		--gr.drawString("bLeft: " .. string.format("%.2f",bLeft.x) .. ", " .. string.format("%.2f",bLeft.y))
		--gr.drawString("bRight: " .. string.format("%.2f",bRight.x) .. ", " .. string.format("%.2f",bRight.y))


		gr.setLineWidth(math.max(1, scale))
		gr.drawLine(positionX + bLeft.x * scale 	, positionY - bLeft.y * scale 		, positionX, positionY)
		gr.drawLine(positionX + bLeft.x * scale 	, positionY - bLeft.y * scale		, positionX - 5 * dirVector.x * scale, positionY + 5 * dirVector.z* scale)
		
		gr.drawLine(positionX + bRight.x * scale 	, positionY - bRight.y * scale 		, positionX, positionY)
		gr.drawLine(positionX + bRight.x * scale	, positionY - bRight.y * scale		, positionX - 5 * dirVector.x * scale, positionY + 5 * dirVector.z* scale)
	end

	function MiniMap:DrawRectangle(Entity, OriginX, OriginY)
		if Entity.Width == 0 or Entity.Length == 0 then
			Entity.Width = Entity.Scale
			Entity.Length = Entity.Scale
		end
		local dirVector = Entity.Entity.Orientation:getFvec():projectOntoPlane(ba.createVector(0,1,0)):getNormalized()
		local angle = math.atan2(dirVector.z, dirVector.x) + math.rad(90)
		local centerCoords = self:GetMapCoords(Entity.Entity)
		if centerCoords then
			gr.setColor(Entity.Color.Red, Entity.Color.Green, Entity.Color.Blue, Entity.Color.Alpha)
			gr.drawRectangleCentered(OriginX + centerCoords.x,  OriginY + centerCoords.y, Entity.Width, Entity.Length, true, angle)
			if (Entity.Outline) then
				local tempR, tempG, tempB, tempA = gr.getColor()
				gr.setColor(0, 0, 0, 255)
				gr.setLineWidth(1.2)
				gr.drawRectangleCentered(OriginX + centerCoords.x,  OriginY + centerCoords.y, Entity.Width, Entity.Length, false, angle)
				gr.setColor(tempR, tempG, tempB, tempA)
			end
		end
	end

	function MiniMap:UpdateFighterList()
		local shipIter = mn.getShipList()
		for ship in shipIter do
			if not (not ship:isValid() or ship:isDying() or ship:isDepartingWarp() or ship:isDepartingDockbay()) then
				if (ship.Class.Type.Name == tb.ShipTypes["fighter"].Name) or (ship.Class.Type.Name == tb.ShipTypes["bomber"].Name) then
					if not self:IsObjectMonitored(ship) then
						if (MiniMap.DefaultColor == MiniMap.ColorSettings.Custom) then
							self:MonitorObject(ship, 0.75, MiniMap.DefaultShape, MiniMap.CustomColor)
						else
							self:MonitorObject(ship, 0.75, MiniMap.DefaultShape)
						end
					end
				end
			end
		end
	end

	function MiniMap:MonitorObject(object, scale, shape, color, width, length, low, outline)
		local teamColorR, teamColorG, teamColorB = object.Team:getColor()
		color = color or {Red = teamColorR, Green = teamColorG, Blue = teamColorB, Alpha = 255}
 		scale = scale or 1
 		shape = shape or MiniMap.Shapes.Circle
 		width = width or 0
 		length = length or 0
 		low = low or false
 		outline = outline or false
 		if low then
 			table.insert(self.LowPriorityEntities, 1, {Entity = object, Color = color, Scale = scale, Shape = shape, Width = width, Length = length, Outline = outline})
 		else
 			table.insert(self.MonitoredEntities, 1, {Entity = object, Color = color, Scale = scale, Shape = shape, Width = width, Length = length, Outline = outline})
		end
	end


	function MiniMap:MonitorShipsOfClass(shipClass, scale, shape, colorObj, width, length, low)
		--local searchClass = tb.ShipClass[className]
		local shipIter = mn.getShipList()
		for ship in shipIter do
		  if ship.Class == shipClass then
		  	MiniMap:MonitorObject(ship, scale, shape, colorObj, width, length, low)
		  end
		end
	end

	-- function MiniMap:MonitorShipByName(name, scale, arrow, color)

	-- end

	function MiniMap:IsObjectMonitored(object)
		for k, obj in ipairs(MiniMap.MonitoredEntities) do
			if obj.Entity:getSignature() == object:getSignature() then
				return true
			end
		end
		return false
	end
]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start:
[
	MiniMap:Init()
]

$On Frame:
[
	local player = hv.Player
	
	if mn.getMissionTime() > 0.1 and player:isValid() then
		MiniMap:CheckMonitoredObjects()
		MiniMap.MonitoredEntities.Player = player
		if MiniMap.AutoAddFighters then
			MiniMap:UpdateFighterList()
		end
	end
]

$On HUD Draw:
[
	if mn.getMissionTime() > 0.1 and MiniMap.Active then
		MiniMap:DrawClipped()
	end
]

#End